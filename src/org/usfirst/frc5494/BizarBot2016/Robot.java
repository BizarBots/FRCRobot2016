// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5494.BizarBot2016;

import java.io.IOException;

import org.usfirst.frc5494.BizarBot2016.commands.AutonomousCommand;
import org.usfirst.frc5494.BizarBot2016.subsystems.DriveSystem;
import org.usfirst.frc5494.BizarBot2016.subsystems.Flippers;
import org.usfirst.frc5494.BizarBot2016.subsystems.Shooter;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.vision.USBCamera;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	Command autonomousCommand;

	// camera instances
	CameraServer server;
	USBCamera camera;

	NetworkTable ntable;
	Process gripProcess;

	static double cameraAngle = 5000;
	static volatile double gripX = 0;
	static volatile double[] centerXArray;
	static volatile double[] gripAreaArray;
	static volatile double lastCamAngle = 0;
	
	static final double[] DUMMY = { 5000 };

	public static OI oi;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static DriveSystem driveSystem;
	public static Flippers flippers;
	public static Shooter shooter;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	public void robotInit() {
		RobotMap.init();
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		driveSystem = new DriveSystem();
		flippers = new Flippers();
		shooter = new Shooter();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// OI must be constructed after subsystems. If the OI creates Commands
		// (which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();

		// instantiate the command used for the autonomous period
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

		autonomousCommand = new AutonomousCommand();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

		// vision init
		server = CameraServer.getInstance();
		server.setQuality(25);
		server.setSize(100);
		camera = new USBCamera("cam1");
		server.startAutomaticCapture(camera);
		
		ntable = NetworkTable.getTable("GRIP");
		try {
			this.gripProcess = new ProcessBuilder("/home/admin/grip").inheritIO().start();
		} catch (IOException e) {
		}

	}

	/**
	 * This function is called when the disabled button is hit. You can use it
	 * to reset subsystems before shutting down.
	 */
	public void disabledInit() {
		this.gripProcess.destroy();
	}

	public void disabledPeriodic() {
		Scheduler.getInstance().run();

		displayVoltage();
		updateGripNetwork();
	}

	public void autonomousInit() {
		// schedule the autonomous command (example)
		if (autonomousCommand != null)
			autonomousCommand.start();
	}

	/**
	 * This function is called periodically during autonomous
	 */
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();

		displayVoltage();
		updateGripNetwork();
	}

	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null) {
			autonomousCommand.cancel();
		}
	}

	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {
		Scheduler.getInstance().run();

		displayVoltage();
		updateGripNetwork();
	}

	/**
	 * This function is called periodically during test mode
	 */
	public void testPeriodic() {
		LiveWindow.run();
		displayVoltage();
		updateGripNetwork();
	}
	
	private void displayVoltage() {
		RobotMap.digitBoard.display(12.34);
		//RobotMap.digitBoard.display(DriverStation.getInstance().getBatteryVoltage());
	}
	
	private void updateGripNetwork() {
		Robot.centerXArray = ntable.getSubTable("myContoursReport").getNumberArray("centerX", DUMMY);
		Robot.gripAreaArray = ntable.getSubTable("myContoursReport").getNumberArray("area", DUMMY);
		// Prevents RoboRIO from using two different frames of data
		if (Robot.centerXArray.length != Robot.gripAreaArray.length) {
			// this.updateGripNetwork();
			return;
		}

		if (Robot.centerXArray.length != 0) {
			double maxArea = 0;
			int maxIndex = 0;
			for (int i = 0; i < Robot.gripAreaArray.length; i++) {
				if (Robot.gripAreaArray[i] > maxArea) {
					maxArea = Robot.gripAreaArray[i];
					maxIndex = i;
				}
			}
			Robot.gripX = Robot.centerXArray[maxIndex];
		} else {
			Robot.gripX = 0.0;
		}
	}
}
