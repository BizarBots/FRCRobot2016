// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5494.BizarBot2016;

import org.usfirst.frc.team3216.robot.REVDigitBoard;

import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap
{
	public static SpeedController driveSystemTopLeft;
    public static SpeedController driveSystemTopRight;
    public static SpeedController driveSystemBottomLeft;
    public static SpeedController driveSystemTankBottomRight;
    public static RobotDrive driveSystemRobotDrive41;
    
    public static SpeedController flippersFlipperLeft;
    public static SpeedController flippersFlipperRight;
    public static RobotDrive flippersRobotDrive21;
    public static DigitalInput flippersLimitSwitchT;
    public static DigitalInput flippersLimitSwitchB;
    
    public static SpeedController liftEndGameLift;
    
    public static DoubleSolenoid shooterSolenoid1;
    public static DoubleSolenoid shooterSolenoid2;
    public static Solenoid shooterSolenoid3;
    public static SpeedController shooterVacuum1;
    public static SpeedController shooterVacuum2;
    public static SpeedController shooterVacuum3;
    public static SpeedController shooterAngler;
    
    public static Encoder encoder;
    
    public static REVDigitBoard digitBoard;
    
    public static void init() {
        driveSystemTopLeft = new VictorSP(0);
        LiveWindow.addActuator("DriveSystemTank", "TopLeft", (VictorSP) driveSystemTopLeft);
        
        driveSystemTopRight = new VictorSP(1);
        LiveWindow.addActuator("DriveSystemTank", "TopRight", (VictorSP) driveSystemTopRight);
        
        driveSystemBottomLeft = new VictorSP(2);
        LiveWindow.addActuator("DriveSystemTank", "BottomLeft", (VictorSP) driveSystemBottomLeft);
        
        driveSystemTankBottomRight = new VictorSP(3);
        LiveWindow.addActuator("DriveSystemTank", "BottomRight", (VictorSP) driveSystemTankBottomRight);
        
        driveSystemRobotDrive41 = new RobotDrive(driveSystemTopLeft, driveSystemBottomLeft,
              driveSystemTopRight, driveSystemTankBottomRight);
        
        driveSystemRobotDrive41.setSafetyEnabled(true);
        driveSystemRobotDrive41.setExpiration(0.1);
        driveSystemRobotDrive41.setSensitivity(0.5);
        driveSystemRobotDrive41.setMaxOutput(1.0);

        flippersFlipperLeft = new VictorSP(4);
        LiveWindow.addActuator("Flippers", "FlipperLeft", (VictorSP) flippersFlipperLeft);
        
        flippersFlipperRight = new VictorSP(5);
        LiveWindow.addActuator("Flippers", "FlipperRight", (VictorSP) flippersFlipperRight);
        
        flippersRobotDrive21 = new RobotDrive(flippersFlipperLeft, flippersFlipperRight);
        
        flippersRobotDrive21.setSafetyEnabled(true);
        flippersRobotDrive21.setExpiration(0.1);
        flippersRobotDrive21.setSensitivity(0.5);
        flippersRobotDrive21.setMaxOutput(1.0);

        shooterSolenoid1 = new DoubleSolenoid(0, 1);
        shooterSolenoid2 = new DoubleSolenoid(2, 3);
        LiveWindow.addActuator("Solenoid", 4, shooterSolenoid1);
        
        shooterSolenoid3 = new Solenoid(4);
        
        shooterAngler = new Talon(6);
        
        shooterVacuum1 = new VictorSP(7);
        shooterVacuum2 = new VictorSP(8);
        shooterVacuum3 = new VictorSP(9);
        
        encoder = new Encoder(0, 1, false, EncodingType.k4X);
        
        flippersLimitSwitchT = new DigitalInput(2);
        flippersLimitSwitchB = new DigitalInput(3);
        
        digitBoard = new REVDigitBoard();
    }
}
